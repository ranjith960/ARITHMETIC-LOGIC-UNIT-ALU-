module ALU(
    input [3:0] A,      // 4-bit input A
    input [3:0] B,      // 4-bit input B
    input [2:0] ALUOp,  // ALU operation selector
    output reg [3:0] Result, // ALU result
    output reg Zero     // Zero flag
);

    // Define ALU operation codes
    // ALUOp:
    // 000 - Addition
    // 001 - Subtraction
    // 010 - AND
    // 011 - OR
    // 100 - NOT (A)
    always @ (A, B, ALUOp) begin
        case(ALUOp)
            3'b000: Result = A + B;             // Addition
            3'b001: Result = A - B;             // Subtraction
            3'b010: Result = A & B;             // AND
            3'b011: Result = A | B;             // OR
            3'b100: Result = ~A;                // NOT (A)
            default: Result = 4'b0000;          // Default case
        endcase
        
        // Set Zero flag if the result is 0
        if (Result == 4'b0000)
            Zero = 1;
        else
            Zero = 0;
    end
endmodule

TESTBENCH
module ALU_tb;
    reg [3:0] A, B;             // Inputs
    reg [2:0] ALUOp;            // Operation select
    wire [3:0] Result;          // ALU output
    wire Zero;                  // Zero flag

    // Instantiate the ALU
    ALU uut (
        .A(A),
        .B(B),
        .ALUOp(ALUOp),
        .Result(Result),
        .Zero(Zero)
    );

    // Test vectors
    initial begin
        // Test case 1: Addition
        A = 4'b0011; B = 4'b0001; ALUOp = 3'b000; // 3 + 1 = 4
        #10;
        
        // Test case 2: Subtraction
        A = 4'b0101; B = 4'b0001; ALUOp = 3'b001; // 5 - 1 = 4
        #10;
        
        // Test case 3: AND
        A = 4'b1100; B = 4'b1010; ALUOp = 3'b010; // 12 & 10 = 8
        #10;
        
        // Test case 4: OR
        A = 4'b1100; B = 4'b1010; ALUOp = 3'b011; // 12 | 10 = 14
        #10;
        
        // Test case 5: NOT
        A = 4'b1010; ALUOp = 3'b100; // ~10 = 5
        #10;
        
        // Test case 6: Zero flag test (result should be zero)
        A = 4'b0000; B = 4'b0000; ALUOp = 3'b000; // 0 + 0 = 0
        #10;

        // Finish simulation
        $finish;
    end

    // Monitor outputs
    initial begin
        $monitor("Time = %0t | A = %b, B = %b, ALUOp = %b, Result = %b, Zero = %b", $time, A, B, ALUOp, Result, Zero);
    end
endmodule


